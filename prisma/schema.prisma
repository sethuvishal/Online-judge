generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  Username   String       @db.VarChar(255)
  email      String       @unique() @db.VarChar(255)
  password   String       @db.VarChar(255)
  role       Role         @default(USER)
  tokens     String[]
  createdAt  DateTime     @default(now())
  submission Submission[]
  Comments   Comment[]
  Vote       Vote[]
}

model Problem {
  id               String       @id @default(uuid())
  no               Int          @default(autoincrement())
  title            String
  description      String
  input_types      String[]
  test_cases       String
  code_snippets    String
  submission_count Int          @default(0)
  accepted         Int          @default(0)
  difficulty       Difficulty   @default(EASY)
  timeLimit        Int          @default(10)
  memoryLimit      Int          @default(10)
  submission       Submission[]
  Comments         Comment[]
  Vote             Vote[]
}

model Submission {
  id             String      @id @default(uuid())
  code           String
  result         JudgeStatus @default(PENDING)
  language       Language
  Problem        Problem     @relation(fields: [problemId], references: [id])
  problemId      String
  User           User        @relation(fields: [userId], references: [id])
  userId         String
  submitedAt     DateTime    @default(now())
  failedTestCase String?
  timeTaken      Int?
  memoryUsed     Int?
}

model Comment {
  id        String   @id @default(uuid())
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  text      String
  createdAt DateTime @default(now())
}

model Vote {
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      VoteType

  @@id([userId, problemId])
}

enum VoteType {
  UP
  DOWN
}

enum Language {
  CPP
  C
  JAVASCRIPT
  JAVA
  PYTHON
}

enum JudgeStatus {
  PENDING
  ACCEPTED
  FAILED
  ERROR
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
